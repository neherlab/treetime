#!/usr/bin/env bash
# shellcheck disable=SC2086

# Uploads build artifacts to GitHub releases
#
# Dependencies:
#  mkdir -p "${HOME}/bin"
#  export PATH="${HOME}/bin:${PATH}"
#  curl -fsSL "https://github.com/cli/cli/releases/download/v2.10.1/gh_2.10.1_linux_amd64.tar.gz" | tar xz -C "${HOME}/bin" --strip-components=2 gh_2.10.1_linux_amd64/bin/gh
#  curl -fsSL "https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64" -o "${HOME}/bin/dasel" && chmod +x "${HOME}/bin/dasel"
#  curl -fsSL "https://github.com/stedolan/jq/releases/download/jq-1.7.1/jq-linux64" -o ${HOME}/bin/jq && chmod +x ${HOME}/bin/jq

set -euxo pipefail
trap "exit" INT
trap 'echo "ERROR: $BASH_SOURCE:$LINENO $BASH_COMMAND" >&2' ERR

# Directory where this script resides
THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

artifacts_dir=
repo=
git_sha=

: "${1:?--artifacts_dir, --repo, --git_sha are required.}"
: "${GITHUB_TOKEN:? Env var \$GITHUB_TOKEN is required.}"

while [ "${1:-}" != "" ]; do
  case $1 in
  --artifacts_dir)
    shift
    artifacts_dir=$1
    shift
    ;;
  --repo)
    shift
    repo=$1
    shift
    ;;
  --git_sha)
    shift
    git_sha=$1
    shift
    ;;
  *)
    echo "$0: illegal option $1" >/dev/stderr
    exit 1
    ;;
  esac
done

[ -z "$artifacts_dir" ] && echo "--artifacts_dir is required" >/dev/stderr && exit 1
[ -z "$repo" ] && echo "--repo is required" >/dev/stderr && exit 1
[ -z "$git_sha" ] && echo "--git_sha is required" >/dev/stderr && exit 1

version=$(dasel select -r toml -w - -s ".workspace.package.version" -f "Cargo.toml")
release_type=$("${THIS_DIR}/lib/semver" get prerel "${version}" | cut -d '.' -f 1)
prerelease_flag=${release_type:+--prerelease}

# shellcheck disable=SC2086
# Create a release.
# We send release notes to stdin here.
(
  if [ -z "$release_type" ]; then
    ./dev/extract-release-notes CHANGELOG.md
    cat docs/other/release-instructions.md
  else
    cat docs/other/prerelease-warning.md
    echo "For changes compared to the previous final release version, please refer to \"Unreleased\" section in [CHANGELOG.md](https://github.com/nextstrain/nextclade/blob/${git_sha}/CHANGELOG.md)"
  fi
) |
  gh release create \
    "${version}" \
    --repo "${repo}" \
    --title "${version}" \
    --target "${git_sha}" \
    --notes-file - \
    $prerelease_flag &>/dev/null ||
  true

# Looks like the release appears not immediately, and if an upload is following too quickly
# it fails because it cannot find the release. So let's wait for an arbitrary amount of
# time here until the release is live.
while [ "release not found" == "$(gh release view "${version}" --repo "${repo}" 2>&1 || true)" ]; do
  echo "Waiting for release to go online"
  sleep 2
done

# Check the release once again, in case of other errors
gh release view "${version}" --repo "${repo}" >/dev/null

# Upload files
gh release upload \
  "${version}" \
  --repo "${repo}" \
  --clobber \
  ${artifacts_dir}/* >/dev/null

# Add emoji reaction
react_to_release() {
  emoji=${1:-rocket}

  release_id=$(curl -fsSL \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    "https://api.github.com/repos/${repo}/releases/tags/${version}" |
    jq ".id")

  if [ -n "$release_id" ]; then
    curl -fsSL \
      -X POST \
      -H "Accept: application/vnd.github.v3+json" \
      -H "Authorization: token ${GITHUB_TOKEN}" \
      "https://api.github.com/repos/${repo}/releases/${release_id}/reactions" \
      -d "{\"content\":\"$emoji\"}" >/dev/null
  fi
}

react_to_release 'hooray'
