# syntax=docker/dockerfile:1
# check=experimental=all
FROM debian:12.8

SHELL ["bash", "-euxo", "pipefail", "-c"]

ARG HOST_TUPLE_DEBIAN
ARG HOST_TUPLE
ARG HOST_TUPLE_UPPER
ARG HOST_TUPLE_SAFE
ARG HOST_GCC_TRIPLET

ENV HOST_TUPLE_DEBIAN="${HOST_TUPLE_DEBIAN}"
ENV HOST_TUPLE="${HOST_TUPLE}"
ENV HOST_TUPLE_UPPER="${HOST_TUPLE_UPPER}"
ENV HOST_TUPLE_SAFE="${HOST_TUPLE_SAFE}"
ENV HOST_GCC_TRIPLET="${HOST_GCC_TRIPLET}"

ARG CROSS_ARCH_DEBIAN
ARG CROSS_ARCH
ARG CROSS_COMPILE
ARG CROSS_COMPILE_UPPER
ARG CROSS_COMPILE_SAFE
ARG CROSS_GCC_TRIPLET
ARG CROSS_RUNNER

ENV CROSS_ARCH_DEBIAN="${CROSS_ARCH_DEBIAN}"
ENV CROSS_ARCH="${CROSS_ARCH}"
ENV CROSS_COMPILE="${CROSS_COMPILE}"
ENV CROSS_COMPILE_UPPER="${CROSS_COMPILE_UPPER}"
ENV CROSS_COMPILE_SAFE="${CROSS_COMPILE_SAFE}"
ENV CROSS_GCC_TRIPLET="${CROSS_GCC_TRIPLET}"
ENV CROSS_RUNNER="${CROSS_RUNNER}"

RUN set -euxo pipefail >/dev/null \
&& export DEBIAN_FRONTEND=noninteractive \
&& dpkg --add-architecture ${CROSS_ARCH_DEBIAN} \
&& apt-get update -qq --yes \
&& apt-get install -qq --no-install-recommends --yes \
  bash \
  ca-certificates \
  curl \
  file \
  git \
  make \
  pigz \
  pixz \
  pkg-config \
  sudo \
  tar \
  time \
  unzip \
  util-linux \
  xz-utils \
  zstd \
>/dev/null \
&& if [[ "${CROSS_COMPILE}" =~ (linux) ]]; then apt-get install -qq --no-install-recommends --yes  \
  libc6:${CROSS_ARCH_DEBIAN} \
  qemu-user \
>/dev/null \
;fi \
&& if [[ "${CROSS_COMPILE}" =~ (mingw|windows) ]]; then apt-get install -qq --no-install-recommends --yes  \
  wine64 \
>/dev/null \
;fi \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean autoclean >/dev/null \
&& apt-get autoremove --yes >/dev/null

ENV PREFIX_HOST="/opt/host"
ENV HOST_GCC_DIR="${PREFIX_HOST}"
COPY --link "dev/docker/files/install-gcc-cross" "/"
RUN /install-gcc-cross "${HOST_TUPLE}" "${HOST_GCC_DIR}"

COPY --link "dev/docker/files/install-llvm" "/"
RUN /install-llvm

COPY --link "dev/docker/files/install-protobuf" "/"
RUN /install-protobuf

COPY --link "dev/docker/files/install-libbzip2" "/"
RUN /install-libbzip2 "${HOST_TUPLE}" "${PREFIX_HOST}"

COPY --link "dev/docker/files/install-liblzma" "/"
RUN /install-liblzma "${HOST_TUPLE}" "${PREFIX_HOST}"

COPY --link "dev/docker/files/install-libz" "/"
RUN /install-libz "${HOST_TUPLE}" "${PREFIX_HOST}"

COPY --link "dev/docker/files/install-libzstd" "/"
RUN /install-libzstd "${HOST_TUPLE}" "${PREFIX_HOST}"
ENV ZSTD_SYS_USE_PKG_CONFIG="1"



ENV PREFIX_CROSS="/opt/cross-${CROSS_COMPILE}"
ENV CROSS_GCC_DIR="${PREFIX_CROSS}"
COPY --link "dev/docker/files/install-gcc-cross" "/"
RUN /install-gcc-cross "${CROSS_GCC_TRIPLET}" "${CROSS_GCC_DIR}"

ENV OPENBLAS_LIB_DIR="${PREFIX_CROSS}/lib"
COPY --link "dev/docker/files/install-openblas" "/"
RUN /install-openblas "${CROSS_COMPILE}" "${PREFIX_CROSS}"

COPY --link "dev/docker/files/install-libbzip2" "/"
RUN /install-libbzip2 "${CROSS_COMPILE}" "${PREFIX_CROSS}"

COPY --link "dev/docker/files/install-liblzma" "/"
RUN /install-liblzma "${CROSS_COMPILE}" "${PREFIX_CROSS}"

COPY --link "dev/docker/files/install-libz" "/"
RUN /install-libz "${CROSS_COMPILE}" "${PREFIX_CROSS}"

COPY --link "dev/docker/files/install-libzstd" "/"
RUN /install-libzstd "${CROSS_COMPILE}" "${PREFIX_CROSS}"
ENV ZSTD_SYS_USE_PKG_CONFIG="1"
ENV LIBZ_SYS_STATIC="1"


ENV CROSS_SYSROOT="${CROSS_GCC_DIR}/${CROSS_GCC_TRIPLET}/sysroot"

ENV CROSS_GCC="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-gcc"
ENV CROSS_GXX="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-g++"
ENV CROSS_GFORTRAN="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-gfortran"
ENV CROSS_CLANG="/usr/bin/clang"
ENV CROSS_CLANGPP="/usr/bin/clang++"
ENV CROSS_ADDR2LINE="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-addr2line"
ENV CROSS_AR="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-gcc-ar"
ENV CROSS_AS="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-as"
ENV CROSS_CPP="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-cpp"
ENV CROSS_ELFEDIT="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-elfedit"
ENV CROSS_LD="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-ld"
ENV CROSS_LDD="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-ldd"
ENV CROSS_NM="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-gcc-nm"
ENV CROSS_OBJCOPY="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-objcopy"
ENV CROSS_OBJDUMP="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-objdump"
ENV CROSS_RANLIB="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-gcc-ranlib"
ENV CROSS_READELF="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-readelf"
ENV CROSS_SIZE="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-size"
ENV CROSS_STRINGS="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-strings"
ENV CROSS_STRIP="${CROSS_GCC_DIR}/bin/${CROSS_GCC_TRIPLET}-strip"

ENV CROSS_CC="${CROSS_GCC}"
ENV CROSS_CXX="${CROSS_GXX}"
ENV CROSS_FC="${CROSS_GFORTRAN}"

ENV CROSSCC="${CROSS_CC}"
ENV CROSSCXX="${CROSS_CXX}"
ENV CROSSFC="${CROSS_FC}"
ENV CROSSLD="${CROSS_LD}"

ENV CC_${CROSS_COMPILE_SAFE}="$CROSS_GCC"
ENV CXX_${CROSS_COMPILE_SAFE}="$CROSS_GXX"
ENV GCC_${CROSS_COMPILE_SAFE}="$CROSS_GCC"
ENV GXX_${CROSS_COMPILE_SAFE}="$CROSS_GXX"
ENV CLANG_${CROSS_COMPILE_SAFE}="$CROSS_CLANG"
ENV CLANGPP_${CROSS_COMPILE_SAFE}="$CROSS_CLANGPP"
ENV FC_${CROSS_COMPILE_SAFE}="$CROSS_FC"
ENV ADDR2LINE_${CROSS_COMPILE_SAFE}="$CROSS_ADDR2LINE"
ENV AR_${CROSS_COMPILE_SAFE}="$CROSS_AR"
ENV AS_${CROSS_COMPILE_SAFE}="$CROSS_AS"
ENV CPP_${CROSS_COMPILE_SAFE}="$CROSS_CPP"
ENV ELFEDIT_${CROSS_COMPILE_SAFE}="$CROSS_ELFEDIT"
ENV LD_${CROSS_COMPILE_SAFE}="$CROSS_LD"
ENV LDD_${CROSS_COMPILE_SAFE}="$CROSS_LDD"
ENV NM_${CROSS_COMPILE_SAFE}="$CROSS_NM"
ENV OBJCOPY_${CROSS_COMPILE_SAFE}="$CROSS_OBJCOPY"
ENV OBJDUMP_${CROSS_COMPILE_SAFE}="$CROSS_OBJDUMP"
ENV RANLIB_${CROSS_COMPILE_SAFE}="$CROSS_RANLIB"
ENV READELF_${CROSS_COMPILE_SAFE}="$CROSS_READELF"
ENV SIZE_${CROSS_COMPILE_SAFE}="$CROSS_SIZE"
ENV STRINGS_${CROSS_COMPILE_SAFE}="$CROSS_STRINGS"
ENV STRIP_${CROSS_COMPILE_SAFE}="$CROSS_STRIP"


#ENV BINDGEN_EXTRA_CLANG_ARGS="--sysroot=${CROSS_SYSROOT}"
ENV BINDGEN_EXTRA_CLANG_ARGS_${CROSS_COMPILE_SAFE}="--sysroot=${CROSS_SYSROOT}"
ENV CARGO_TARGET_${CROSS_COMPILE_UPPER}_AR="${CROSS_AR}"
ENV CARGO_TARGET_${CROSS_COMPILE_UPPER}_LINKER="${CROSS_CC}"
ENV CARGO_TARGET_${CROSS_COMPILE_UPPER}_STRIP="${CROSS_STRIP}"
ENV CARGO_TARGET_${CROSS_COMPILE_UPPER}_RUNNER="${CROSS_RUNNER}"


ENV HOST_SYSROOT="${HOST_GCC_DIR}/${HOST_GCC_TRIPLET}/sysroot"

ENV HOST_GCC="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-gcc"
ENV HOST_GXX="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-g++"
ENV HOST_GFORTRAN="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-gfortran"
ENV HOST_CLANG="/usr/bin/clang"
ENV HOST_CLANGPP="/usr/bin/clang++"
ENV HOST_ADDR2LINE="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-addr2line"
ENV HOST_AR="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-gcc-ar"
ENV HOST_AS="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-as"
ENV HOST_CPP="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-cpp"
ENV HOST_ELFEDIT="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-elfedit"
ENV HOST_LD="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-ld"
ENV HOST_LDD="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-ldd"
ENV HOST_NM="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-gcc-nm"
ENV HOST_OBJCOPY="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-objcopy"
ENV HOST_OBJDUMP="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-objdump"
ENV HOST_RANLIB="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-gcc-ranlib"
ENV HOST_READELF="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-readelf"
ENV HOST_SIZE="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-size"
ENV HOST_STRINGS="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-strings"
ENV HOST_STRIP="${HOST_GCC_DIR}/bin/${HOST_GCC_TRIPLET}-strip"

ENV HOST_CC="${HOST_GCC}"
ENV HOST_CXX="${HOST_GXX}"
ENV HOST_FC="${HOST_GFORTRAN}"

ENV HOSTCC="${HOST_CC}"
ENV HOSTCXX="${HOST_CXX}"
ENV HOSTFC="${HOST_FC}"
ENV HOSTLD="${HOST_LD}"

ENV CC_${HOST_TUPLE_SAFE}="$HOST_GCC"
ENV CXX_${HOST_TUPLE_SAFE}="$HOST_GXX"
ENV GCC_${HOST_TUPLE_SAFE}="$HOST_GCC"
ENV GXX_${HOST_TUPLE_SAFE}="$HOST_GXX"
ENV CLANG_${HOST_TUPLE_SAFE}="$HOST_CLANG"
ENV CLANGPP_${HOST_TUPLE_SAFE}="$HOST_CLANGPP"
ENV FC_${HOST_TUPLE_SAFE}="$HOST_FC"
ENV ADDR2LINE_${HOST_TUPLE_SAFE}="$HOST_ADDR2LINE"
ENV AR_${HOST_TUPLE_SAFE}="$HOST_AR"
ENV AS_${HOST_TUPLE_SAFE}="$HOST_AS"
ENV CPP_${HOST_TUPLE_SAFE}="$HOST_CPP"
ENV ELFEDIT_${HOST_TUPLE_SAFE}="$HOST_ELFEDIT"
ENV LD_${HOST_TUPLE_SAFE}="$HOST_LD"
ENV LDD_${HOST_TUPLE_SAFE}="$HOST_LDD"
ENV NM_${HOST_TUPLE_SAFE}="$HOST_NM"
ENV OBJCOPY_${HOST_TUPLE_SAFE}="$HOST_OBJCOPY"
ENV OBJDUMP_${HOST_TUPLE_SAFE}="$HOST_OBJDUMP"
ENV RANLIB_${HOST_TUPLE_SAFE}="$HOST_RANLIB"
ENV READELF_${HOST_TUPLE_SAFE}="$HOST_READELF"
ENV SIZE_${HOST_TUPLE_SAFE}="$HOST_SIZE"
ENV STRINGS_${HOST_TUPLE_SAFE}="$HOST_STRINGS"
ENV STRIP_${HOST_TUPLE_SAFE}="$HOST_STRIP"

ENV BINDGEN_EXTRA_CLANG_ARGS_${HOST_TUPLE_SAFE}="--sysroot=${HOST_SYSROOT}"
ENV CARGO_TARGET_${HOST_TUPLE_UPPER}_AR="${HOST_AR}"
ENV CARGO_TARGET_${HOST_TUPLE_UPPER}_LINKER="${HOST_GCC}"
ENV CARGO_TARGET_${HOST_TUPLE_UPPER}_STRIP="${HOST_STRIP}"


ENV PATH="${PREFIX_CROSS}/bin:${PREFIX_HOST}/bin:${PATH}"

ENV CROSS_C_INCLUDE_PATH="${PREFIX_CROSS}/include:${CROSS_GCC_DIR}/include"
ENV HOST_C_INCLUDE_PATH="${PREFIX_HOST}/include:${HOST_GCC_DIR}/include"

ENV CROSS_CPLUS_INCLUDE_PATH="${CROSS_C_INCLUDE_PATH}"
ENV HOST_CPLUS_INCLUDE_PATH="${HOST_C_INCLUDE_PATH}"

ENV CROSS_LIBRARY_PATH="${PREFIX_CROSS}/lib:${PREFIX_CROSS}/lib64:${CROSS_GCC_DIR}/lib:${CROSS_GCC_DIR}/lib64"
ENV HOST_LIBRARY_PATH="${HOST_GCC_DIR}/lib:${HOST_GCC_DIR}/lib64"

ENV C_INCLUDE_PATH="${CROSS_C_INCLUDE_PATH}:${HOST_C_INCLUDE_PATH}"
ENV CPLUS_INCLUDE_PATH="${CROSS_CPLUS_INCLUDE_PATH}:${HOST_CPLUS_INCLUDE_PATH}"
ENV LIBRARY_PATH="${CROSS_LIBRARY_PATH}:${HOST_LIBRARY_PATH}"

ENV C_INCLUDE_PATH_${HOST_TUPLE_SAFE}="${HOST_C_INCLUDE_PATH}"
ENV CPLUS_INCLUDE_PATH_${HOST_TUPLE_SAFE}="${HOST_CPLUS_INCLUDE_PATH}"
ENV LIBRARY_PATH_${HOST_TUPLE_SAFE}="${HOST_LIBRARY_PATH}"

ENV C_INCLUDE_PATH_${CROSS_COMPILE_SAFE}="${CROSS_C_INCLUDE_PATH}"
ENV CPLUS_INCLUDE_PATH_${CROSS_COMPILE_SAFE}="${CROSS_CPLUS_INCLUDE_PATH}"
ENV LIBRARY_PATH_${CROSS_COMPILE_SAFE}="${CROSS_LIBRARY_PATH}"

ENV CROSS_PKG_CONFIG_PATH="${PREFIX_CROSS}/lib/pkgconfig:${PREFIX_CROSS}/lib64/pkgconfig"
ENV HOST_PKG_CONFIG_PATH="${HOST_GCC_DIR}/lib/pkgconfig:${HOST_GCC_DIR}/lib64/pkgconfig"
ENV PKG_CONFIG_PATH="${CROSS_PKG_CONFIG_PATH}:${HOST_PKG_CONFIG_PATH}"
ENV PKG_CONFIG_ALLOW_CROSS="1"

ENV PKG_CONFIG_PATH_${HOST_TUPLE_SAFE}="${HOST_PKG_CONFIG_PATH}"
ENV PKG_CONFIG_SYSROOT_DIR_${HOST_TUPLE_SAFE}="${PREFIX_HOST}"

ENV PKG_CONFIG_PATH_${CROSS_COMPILE_SAFE}="${CROSS_PKG_CONFIG_PATH}"
ENV PKG_CONFIG_SYSROOT_DIR_${CROSS_COMPILE_SAFE}="${PREFIX_CROSS}"

ENV PKG_CONFIG_SYSROOT_DIR="${PREFIX_CROSS}"

ENV CMAKE_PREFIX_PATH="${PREFIX_CROSS}"

ENV MINGW_LIB_DIR="${CROSS_SYSROOT}/lib"


ARG USER=user
ARG GROUP=user
ARG UID
ARG GID

ENV USER=$USER
ENV GROUP=$GROUP
ENV UID=$UID
ENV GID=$GID
ENV TERM="xterm-256color"
ENV HOME="/home/${USER}"

COPY --link "dev/docker/files/create-user" "/"
RUN /create-user


USER ${USER}


ENV CARGO_HOME="${HOME}/.cargo"
ENV PATH="${CARGO_HOME}/bin:${PATH}"
COPY --link --chown="${UID}:${GID}" "rust-toolchain.toml" "${CARGO_HOME}/rust-toolchain.toml"
COPY --link "dev/docker/files/install-rust" "/"
RUN set -euxo pipefail >/dev/null \
&& /install-rust "${CROSS_COMPILE}" "${CARGO_HOME}"



ENV WINEPREFIX="${HOME}/wine"
ENV WINEARCH="win64"
ENV WINEDEBUG="err+all,err-winediag,err-ole,fixme-all"
COPY --link "dev/docker/files/install-bryptprimitives" "/"
RUN if [[ "${CROSS_COMPILE}" =~ (mingw|windows) ]]; then /install-bryptprimitives "${WINEPREFIX}/drive_c/windows/system32"; fi
