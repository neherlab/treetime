use crate::alphabet::alphabet::Alphabet;
use eyre::Report;
use indexmap::IndexMap;
use itertools::Itertools;
use lazy_static::lazy_static;
use ndarray::array;
use ndarray::Array1;

lazy_static! {
  static ref PROFILE_MAP_NUC: IndexMap<char, Array1<f64>> = IndexMap::<char, Array1<f64>>::from([
    ('A', array![1.0, 0.0, 0.0, 0.0, 0.0]),
    ('C', array![0.0, 1.0, 0.0, 0.0, 0.0]),
    ('G', array![0.0, 0.0, 1.0, 0.0, 0.0]),
    ('T', array![0.0, 0.0, 0.0, 1.0, 0.0]),
    ('-', array![0.0, 0.0, 0.0, 0.0, 1.0]),
    ('N', array![1.0, 1.0, 1.0, 1.0, 1.0]),
    ('X', array![1.0, 1.0, 1.0, 1.0, 1.0]),
    ('R', array![1.0, 0.0, 1.0, 0.0, 0.0]),
    ('Y', array![0.0, 1.0, 0.0, 1.0, 0.0]),
    ('S', array![0.0, 1.0, 1.0, 0.0, 0.0]),
    ('W', array![1.0, 0.0, 0.0, 1.0, 0.0]),
    ('K', array![0.0, 0.0, 1.0, 1.0, 0.0]),
    ('M', array![1.0, 1.0, 0.0, 0.0, 0.0]),
    ('D', array![1.0, 0.0, 1.0, 1.0, 0.0]),
    ('H', array![1.0, 1.0, 0.0, 1.0, 0.0]),
    ('B', array![0.0, 1.0, 1.0, 1.0, 0.0]),
    ('V', array![1.0, 1.0, 1.0, 0.0, 0.0]),
  ]);

  static ref PROFILE_MAP_NUC_NOGAP: IndexMap<char, Array1<f64>> = IndexMap::<char, Array1<f64>>::from([
    ('A', array![1.0, 0.0, 0.0, 0.0]),
    ('C', array![0.0, 1.0, 0.0, 0.0]),
    ('G', array![0.0, 0.0, 1.0, 0.0]),
    ('T', array![0.0, 0.0, 0.0, 1.0]),
    ('-', array![1.0, 1.0, 1.0, 1.0]), // gaps are completely ignored in distance computations
    ('N', array![1.0, 1.0, 1.0, 1.0]),
    ('X', array![1.0, 1.0, 1.0, 1.0]),
    ('R', array![1.0, 0.0, 1.0, 0.0]),
    ('Y', array![0.0, 1.0, 0.0, 1.0]),
    ('S', array![0.0, 1.0, 1.0, 0.0]),
    ('W', array![1.0, 0.0, 0.0, 1.0]),
    ('K', array![0.0, 0.0, 1.0, 1.0]),
    ('M', array![1.0, 1.0, 0.0, 0.0]),
    ('D', array![1.0, 0.0, 1.0, 1.0]),
    ('H', array![1.0, 1.0, 0.0, 1.0]),
    ('B', array![0.0, 1.0, 1.0, 1.0]),
    ('V', array![1.0, 1.0, 1.0, 0.0]),
  ]);

  static ref PROFILE_MAP_AA: IndexMap<char, Array1<f64>> = IndexMap::<char, Array1<f64>>::from([
    ('A', array![1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Alanine         Ala
    ('C', array![0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Cysteine        Cys
    ('D', array![0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Aspartic AciD   Asp
    ('E', array![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamic Acid   Glu
    ('F', array![0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Phenylalanine   Phe
    ('G', array![0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glycine         Gly
    ('H', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Histidine       His
    ('I', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Isoleucine      Ile
    ('K', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Lysine          Lys
    ('L', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Leucine         Leu
    ('M', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Methionine      Met
    ('N', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // AsparagiNe      Asn
    ('P', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Proline         Pro
    ('Q', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamine       Gln
    ('R', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // ARginine        Arg
    ('S', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Serine          Ser
    ('T', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Threonine       Thr
    ('V', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]), // Valine          Val
    ('W', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]), // Tryptophan      Trp
    ('Y', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]), // Tyrosine        Tyr
    ('*', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]), // stop
    ('-', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]), // gap
    ('X', array![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]), // not specified/any
    ('B', array![0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Asparagine/Aspartic Acid    Asx
    ('Z', array![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamine/Glutamic Acid     Glx
  ]);

  static ref PROFILE_MAP_AA_NOGAP: IndexMap<char, Array1<f64>> = IndexMap::<char, Array1<f64>>::from([
     ('A', array![1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Alanine         Ala
     ('C', array![0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Cysteine        Cys
     ('D', array![0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Aspartic AciD   Asp
     ('E', array![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamic Acid   Glu
     ('F', array![0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Phenylalanine   Phe
     ('G', array![0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glycine         Gly
     ('H', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Histidine       His
     ('I', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Isoleucine      Ile
     ('K', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Lysine          Lys
     ('L', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Leucine         Leu
     ('M', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Methionine      Met
     ('N', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // AsparagiNe      Asn
     ('P', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Proline         Pro
     ('Q', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamine       Gln
     ('R', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // ARginine        Arg
     ('S', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]), // Serine          Ser
     ('T', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]), // Threonine       Thr
     ('V', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]), // Valine          Val
     ('W', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]), // Tryptophan      Trp
     ('Y', array![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]), // Tyrosine        Tyr
     ('X', array![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]), // not specified/any
     ('B', array![0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Asparagine/Aspartic Acid    Asx
     ('Z', array![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), // Glutamine/Glutamic Acid     Glx
  ]);
}

#[derive(Clone, Debug)]
pub struct ProfileMap {
  profile_map: IndexMap<char, Array1<f64>>,
}

impl ProfileMap {
  pub fn new(name: &str) -> Result<Self, Report> {
    let profile_map = match name {
      "nuc" => PROFILE_MAP_NUC.to_owned(),
      "nuc_nogap" => PROFILE_MAP_NUC_NOGAP.to_owned(),
      "aa" => PROFILE_MAP_NUC_NOGAP.to_owned(),
      "aa_nogap" => PROFILE_MAP_NUC_NOGAP.to_owned(),
      _ => unimplemented!("Profile map for alphabet '{}' is not implemented", name),
    };
    Ok(Self { profile_map })
  }

  pub fn from_alphabet(alphabet: &Alphabet) -> Result<Self, Report> {
    Self::new(&alphabet.name)
  }

  #[inline]
  pub fn get(&self, c: char) -> &Array1<f64> {
    self
      .profile_map
      .get(&c)
      .ok_or_else(|| {
        format!(
          "When accessing profile map: Unknown character: '{c}'. Known characters: {}",
          self.profile_map.keys().join(", ")
        )
      })
      .unwrap()
  }
}
